#!/bin/bash

# Skrypt do konfiguracji serwera Nginx dla aplikacji "Generator Opisów Celów" na systemie RHEL 8.
# Uruchom ten skrypt z uprawnieniami roota, np. przez 'sudo bash install.sh.txt'

# Zatrzymaj wykonywanie skryptu w przypadku błędu
set -e

# --- Konfiguracja ---
# Katalog docelowy, gdzie zostaną umieszczone pliki aplikacji
APP_DIRECTORY="/var/www/goal-generator-app"
# Katalog źródłowy (zakładamy, że jest to podkatalog 'dist' w miejscu uruchomienia skryptu)
SOURCE_DIRECTORY="./dist"

# --- Krok 1: Instalacja i Konfiguracja Nginx ---
echo ">>> Krok 1/5: Konfiguracja Nginx..."

# Sprawdzenie, czy Nginx jest zainstalowany
if ! command -v nginx &> /dev/null
then
    echo "Nginx nie został znaleziony. Próba instalacji..."
    # Użyj dnf (RHEL 8+) lub yum jako fallback
    if command -v dnf &> /dev/null; then
        dnf install -y nginx
    elif command -v yum &> /dev/null; then
        yum install -y nginx
    else
        echo "Nie udało się zidentyfikować menedżera pakietów (dnf/yum). Zainstaluj Nginx ręcznie i uruchom skrypt ponownie."
        exit 1
    fi
fi

# Tworzenie pliku konfiguracyjnego Nginx w standardowej lokalizacji dla RHEL
NGINX_CONF_PATH="/etc/nginx/conf.d/goal-generator.conf"
echo "Tworzenie pliku konfiguracyjnego w $NGINX_CONF_PATH..."
cat <<EOF > $NGINX_CONF_PATH
server {
    listen 8181;
    server_name _;

    # Ścieżka do głównego katalogu aplikacji
    root $APP_DIRECTORY;
    index index.html;

    # Konfiguracja dla aplikacji typu Single Page Application (SPA)
    location / {
        try_files \$uri \$uri/ /index.html;
    }

    # Dodatkowe nagłówki bezpieczeństwa (opcjonalnie, ale zalecane)
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "DENY";
    add_header X-XSS-Protection "1; mode=block";
}
EOF

echo "Konfiguracja Nginx została utworzona."

# --- Krok 2: Przygotowanie katalogu aplikacji ---
echo ">>> Krok 2/5: Przygotowanie katalogu aplikacji..."

# Sprawdzenie, czy katalog źródłowy istnieje
if [ ! -d "$SOURCE_DIRECTORY" ]; then
    echo "BŁĄD: Katalog źródłowy '$SOURCE_DIRECTORY' nie został znaleziony."
    echo "Upewnij się, że zbudowałeś aplikację (np. 'npm run build') i uruchamiasz skrypt z głównego katalogu projektu."
    exit 1
fi

# Utwórz katalog docelowy, jeśli nie istnieje
mkdir -p "$APP_DIRECTORY"

# Kopiowanie plików aplikacji z katalogu 'dist'
echo "Kopiowanie plików aplikacji z '$SOURCE_DIRECTORY' do '$APP_DIRECTORY'..."
rsync -a "$SOURCE_DIRECTORY/" "$APP_DIRECTORY/"

echo "Pliki aplikacji zostały skopiowane."

# --- Krok 3: Ustawianie uprawnień plików ---
echo ">>> Krok 3/5: Ustawianie uprawnień do plików..."

# Zmiana właściciela katalogu na użytkownika i grupę nginx
chown -R nginx:nginx "$APP_DIRECTORY"

echo "Właściciel plików został ustawiony na 'nginx:nginx'."

# --- Krok 4: Konfiguracja SELinux ---
echo ">>> Krok 4/5: Konfiguracja kontekstu SELinux..."
# Jest to kluczowy krok w systemach RHEL, aby zezwolić Nginx na odczyt plików.
# Jeśli SELinux jest wyłączony, to polecenie nie zaszkodzi.
if command -v chcon &> /dev/null; then
    echo "Ustawianie kontekstu httpd_sys_content_t dla katalogu aplikacji..."
    chcon -t httpd_sys_content_t -R "$APP_DIRECTORY"
else
    echo "Polecenie 'chcon' niedostępne, pomijanie konfiguracji SELinux."
fi


# --- Krok 5: Finalizacja i Restart Usługi ---
echo ">>> Krok 5/5: Finalizacja..."

# Sprawdzenie poprawności składni konfiguracji Nginx
echo "Testowanie konfiguracji Nginx..."
nginx -t

# Restart usługi Nginx w celu załadowania nowej konfiguracji
echo "Restartowanie usługi Nginx..."
systemctl restart nginx
systemctl enable nginx # Włącz Nginx przy starcie systemu

echo ""
echo "----------------------------------------------------"
echo "✅ Instalacja zakończona pomyślnie!"
echo "Twoja aplikacja powinna być dostępna pod adresem:"
echo "http://<TWOJ_ADRES_IP_SERWERA>:8181"
echo "----------------------------------------------------"
